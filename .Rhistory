package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
knitr::opts_chunk$set(echo = TRUE, messages = FALSE)
packages <- c("dplyr","readxl", "curl", "ggplot2", "ggrepel", "maps", "plotly", "stringr", "tm", "wordcloud2", "tidyverse", "RColorBrewer", "ggwordcloud", "viridis", "bookdown", "utils", "leaps", "broom","GGally")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
knitr::opts_chunk$set(echo = TRUE, messages = FALSE)
packages <- c("dplyr","readxl", "curl", "ggplot2", "ggrepel", "maps", "plotly", "stringr", "tm", "wordcloud2", "tidyverse", "RColorBrewer", "ggwordcloud", "viridis", "bookdown", "utils", "leaps", "broom","GGally")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
stroke_data %>%
ggplot(mapping = aes(x = bmi, y = age, color = stroke)) +
geom_point() +
geom_smooth(method = 'lm')
stroke_data <- read_csv('./data/healthcare-dataset-stroke-data.csv')
stroke_data$bmi <- as.numeric(stroke_data$bmi)
stroke_data$bmi[is.na(stroke_data$bmi)] <- mean(stroke_data$bmi, na.rm = TRUE)
stroke_data$stroke <- as.factor(stroke_data$stroke)
stroke_data
#testing the effect of non smokers and smokers
count_by_smoke_status <- stroke_data %>%
select(smoking_status, stroke) %>%
group_by(smoking_status, stroke) %>%
summarise( N = n())
#testing the effect of work type
count_by_work_type <- stroke_data %>%
select(work_type, stroke) %>%
group_by(work_type, stroke) %>%
summarise( N = n())
stroke_data %>%
ggplot(mapping = aes(x = bmi, y = age, color = stroke)) +
geom_point() +
geom_smooth(method = 'lm')
stroke_data %>%
filter(stroke == 1) %>%
ggplot(mapping = aes(x = bmi, y = age, color = smoking_status)) +
geom_point(method = 'lm') +
geom_smooth(method = 'lm')
stroke_data %>%
ggplot(mapping = aes(x = bmi, y = avg_glucose_level, color = stroke)) +
geom_point() +
geom_smooth(method = 'lm')
stroke_data %>%
filter(stroke == 1) %>%
ggplot(mapping = aes(x = bmi, y = avg_glucose_level, color = stroke)) +
geom_point(method = 'lm') +
geom_smooth(method = 'lm')
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
#theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
#theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
#theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
#Boxplot on Age
ggplot(stroke_data, aes(y = age)) +
geom_boxplot()
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
#theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
theme_minimal() + theme(axis.text.x = element_text(angle = 0, family="serif"))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
theme_minimal() + theme(axis.text.x = element_text(angle = 0, family="TT Times New Roman"))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
theme_minimal() + theme(axis.text.x = element_text(angle = 0, family="Times New Roman"))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot(color="orange", fill="yellow", alpha=0.2) +
ggtitle("Age by Stroke") +
xlab("Stroke") + ylab("Age") +
theme_minimal() + theme(axis.text.x = element_text(angle = 0))
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Total US population over time",
subtitle = "Population in thousands",
x = "Date",
y = "Total population (in thousands)")
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on Stroke (0) and non-Stroke (1) by Age",
subtitle = "Population in thousands",
x = "Date",
y = "Total population (in thousands)")
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
subtitle = "Population in thousands",
x = "Date",
y = "Total population (in thousands)")
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
subtitle = "Population in thousands",
x = "Age",
y = "Non-stroke (0) and Stroke (1)")
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
subtitle = "Population in thousands",
x = "Age",
y = "Non-stroke (0) and Stroke (1)")
color = "green"
stroke_by_age
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
subtitle = "Population in thousands",
x = "Age",
y = "Non-stroke (0) and Stroke (1)")
color = "green"
stroke_by_age +
theme(text = element_text(family = "Times New Roman"))
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
x = "Age",
y = "Non-stroke (0) and Stroke (1)")
color = "green"
stroke_by_age +
theme(text = element_text(family = "Times New Roman"))
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on non-Stroke (0) and Stroke (1) by Age",
x = "Non-stroke (0) and Stroke (1)",
y = "Age")
color = "green"
stroke_by_age +
theme(text = element_text(family = "Times New Roman"))
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on no-Stroke (0) and Stroke (1) by Age",
x = "No-stroke (0) and Stroke (1)",
y = "Age")
color = "green"
stroke_by_age +
theme(text = element_text(family = "Times New Roman"))
stroke_by_age <- stroke_data %>%
# dplyr::filter(stroke == 1) %>%
ggplot(aes(x = stroke,
y = age)) +
geom_boxplot() +
labs(title = "Boxplot on no-Stroke (0) and Stroke (1) by Age",
x = "No-stroke (0) and Stroke (1)",
y = "Age")
color = "green"
stroke_by_age +
theme(text = element_text(family = "Times New Roman"))
stroke_data %>%
ggplot(mapping = aes(x = bmi, y = age, color = stroke)) +
geom_point() +
geom_smooth(method = 'lm')
stroke_data %>%
filter(stroke == 1) %>%
ggplot(mapping = aes(x = bmi, y = age, color = smoking_status)) +
geom_point(method = 'lm') +
geom_smooth(method = 'lm')
stroke_data %>%
ggplot(mapping = aes(x = bmi, y = avg_glucose_level, color = stroke)) +
geom_point() +
geom_smooth(method = 'lm')
stroke_data %>%
filter(stroke == 1) %>%
ggplot(mapping = aes(x = bmi, y = avg_glucose_level, color = stroke)) +
geom_point(method = 'lm') +
geom_smooth(method = 'lm')
knitr::opts_chunk$set(echo = TRUE, messages = FALSE)
packages <- c("dplyr","readxl", "curl", "ggplot2", "ggrepel", "maps", "plotly", "stringr", "tm", "wordcloud2", "tidyverse", "RColorBrewer", "ggwordcloud", "viridis", "bookdown", "utils", "leaps", "broom","GGally", "e1071", "caret", "mgcv")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
plot(stoke, test_pred, formula, fill = TRUE, grid = 50, slice = list(),
symbolPalette = palette(), svSymbol = "x", dataSymbol = "o", ...)
plot(stoke, test_pred, formula, fill = TRUE, grid = 50, slice = list(),
symbolPalette = palette(), svSymbol = "x", dataSymbol = "o")
plot(stroke, test_pred, formula, fill = TRUE, grid = 50, slice = list(),
symbolPalette = palette(), svSymbol = "x", dataSymbol = "o")
plot(svm_linear, test_pred)
svm_linear
#implement the train function from caret
svm_linear <- train(stroke ~., data = training, method = "svmLinear",
trControl=trctrl,
prepProcess = c("center", "scale"),
tuneLenght = 10)
#split the data into test and train data with a split of 70 (training) / 30 (testing)
set.seed(7406)
intrain <- createDataPartition(y = stroke_data$stroke, p = 0.7, list = FALSE)   #selecting our target variable "stroke"
training <- stroke_data[intrain, ]
testing <- stroke_data[-intrain, ]
#checking the dimension of the training and testing data set
dim(training)
dim(testing)
#implement the train control method with the repeated cross-validation method,
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#implement the train function from caret
svm_linear <- train(stroke ~., data = training, method = "svmLinear",
trControl=trctrl,
prepProcess = c("center", "scale"),
tuneLenght = 10)
svm_linear
plot(svm_linear, test_pred)
#we use the predict function and pass the trained model
#and as new data we pass the testing data set
test_pred <- predict(svm_linear, newdata = testing)
#testing the accuracy of our model with confusionMatrix
confusionMatrix(table(test_pred, testing$stroke))
#we use the predict function and pass the trained model
#and as new data we pass the testing data set
test_pred <- predict(svm_linear, newdata = testing)
############
require(e1071)
require(ElemStatLearn)#package containing the dataset
#Loading the data
attach(mixture.example) #is just a simulated mixture data with 200 rows and 2 classes
names(mixture.example)
knitr::opts_chunk$set(echo = TRUE, messages = FALSE)
packages <- c("dplyr","readxl", "curl", "ggplot2", "ggrepel", "maps", "plotly", "stringr", "tm", "wordcloud2", "tidyverse", "RColorBrewer", "ggwordcloud", "viridis", "bookdown", "utils", "leaps", "broom","GGally", "e1071", "caret", "mgcv", "imbalance", "MLmetrics")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
stroke_data <- read_csv('./data/healthcare-dataset-stroke-data.csv')
stroke_data$age <- as.integer(stroke_data$age)
stroke_data$smoking_status <- as.factor(stroke_data$smoking_status)
stroke_data$work_type <- as.factor(stroke_data$work_type)
stroke_data$gender <- as.factor(stroke_data$gender)
stroke_data$ever_married <- as.factor(stroke_data$ever_married)
stroke_data$Residence_type <- as.factor(stroke_data$Residence_type)
stroke_data$stroke_num <- as.numeric(stroke_data$stroke)
stroke_data$stroke <- as.factor(stroke_data$stroke)
stroke_data
#check for missing values
colSums(is.na(stroke_data))
#convert bmi as number and replace missing values with the mean value of bmi
stroke_data$bmi <- as.numeric(stroke_data$bmi)
stroke_data$bmi[is.na(stroke_data$bmi)] <- mean(stroke_data$bmi, na.rm = TRUE)
svm_linear_grid
#set numeric stoke data type to NUll
svm_stroke$stroke_num <- NULL
#define new data set
svm_stroke <- stroke_data
#replace gender "Other" with "Female
svm_stroke[svm_stroke == "Other"] <- "Female"
#set numeric stoke data type to NUll
svm_stroke$stroke_num <- NULL
head(svm_stroke)
#split the data into test and train data with a split of 70 (training) / 30 (testing)
set.seed(7406)
intrain <- createDataPartition(y = svm_stroke$stroke, p = 0.7, list = FALSE)
#selecting our target variable "stroke"
training <- svm_stroke[intrain, ]
testing <- svm_stroke[-intrain, ]
#checking the dimension of the training and testing data set
dim(training)
dim(testing)
#implement the train control method with the repeated cross-validation method,
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#implement the train function from caret
svm_linear <- train(stroke ~., data = training, method = "svmLinear",
trControl=trctrl,
prepProcess = c("center", "scale"),
tuneLenght = 10)
svm_linear
#test predict with testing data
test_pred <- predict(svm_linear, newdata = testing)
test_pred
#testing the accuracy of our model with confusionMatrix
confusionMatrix(table(test_pred, testing$stroke))
#define different values for c
grid <- expand.grid(C = c(0, 0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2.5))
#improving the performance
svm_linear_grid <- train(stroke ~., data = training, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneGrid = grid,
tuneLength = 10)
svm_linear_grid
test_pred_grid <- predict(svm_linear_grid, newdata = testing)
test_pred_grid
confusionMatrix(table(test_pred_grid, testing$stroke))
#create train and test data set for SVM Model with a split 70 (training) / 30 (test)
set.seed(7406)
n=dim(svm_stroke[1])  # number of observations in dataset
n_train=0.70*n  # training set is 70%
flag = sort(sample(1:n, size=n_train, replace=FALSE))
#use all parameters without first column id
df_train_svm = svm_stroke[flag,]
df_test_svm = svm_stroke[-flag,]
#define stroke train and test variables
ytrain = df_train_svm$stroke
ytest = df_test_svm$stroke
table(df_train_svm$stroke)
summary(df_train)
#create train and test data set for SVM Model with a split 70 (training) / 30 (test)
set.seed(7406)
n=dim(svm_stroke[1])  # number of observations in dataset
n_train=0.70*n  # training set is 70%
flag = sort(sample(1:n, size=n_train, replace=FALSE))
